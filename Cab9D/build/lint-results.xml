<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 22.3">

    <issue
        id="ScrollViewSize"
        severity="Warning"
        message="This LinearLayout should use android:layout_height=&quot;wrap_content&quot;"
        category="Correctness"
        priority="7"
        summary="Checks that ScrollViews use `wrap_content` in the scrolling dimension"
        explanation="ScrollView children must set their `layout_width` or `layout_height` attributes to `wrap_content` rather than `fill_parent` or `match_parent` in the scrolling dimension"
        errorLine1="   android:layout_height=&quot;match_parent&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_profile.xml"
            line="81"
            column="4"/>
    </issue>

    <issue
        id="ScrollViewSize"
        severity="Warning"
        message="This LinearLayout should use android:layout_height=&quot;wrap_content&quot;"
        category="Correctness"
        priority="7"
        summary="Checks that ScrollViews use `wrap_content` in the scrolling dimension"
        explanation="ScrollView children must set their `layout_width` or `layout_height` attributes to `wrap_content` rather than `fill_parent` or `match_parent` in the scrolling dimension"
        errorLine1="   android:layout_height=&quot;match_parent&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_profile.xml"
            line="81"
            column="4"/>
    </issue>

    <issue
        id="ScrollViewSize"
        severity="Warning"
        message="This LinearLayout should use android:layout_height=&quot;wrap_content&quot;"
        category="Correctness"
        priority="7"
        summary="Checks that ScrollViews use `wrap_content` in the scrolling dimension"
        explanation="ScrollView children must set their `layout_width` or `layout_height` attributes to `wrap_content` rather than `fill_parent` or `match_parent` in the scrolling dimension"
        errorLine1="   android:layout_height=&quot;fill_parent&quot;>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="218"
            column="4"/>
    </issue>

    <issue
        id="ScrollViewSize"
        severity="Warning"
        message="This LinearLayout should use android:layout_height=&quot;wrap_content&quot;"
        category="Correctness"
        priority="7"
        summary="Checks that ScrollViews use `wrap_content` in the scrolling dimension"
        explanation="ScrollView children must set their `layout_width` or `layout_height` attributes to `wrap_content` rather than `fill_parent` or `match_parent` in the scrolling dimension"
        errorLine1="   android:layout_height=&quot;fill_parent&quot;>"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="218"
            column="4"/>
    </issue>

    <issue
        id="TextViewEdits"
        severity="Warning"
        message="Attribute android:phoneNumber should not be used with &lt;TextView>: Change element type to &lt;EditText> ?"
        category="Correctness"
        priority="7"
        summary="Looks for TextViews being used for input"
        explanation="Using a `&lt;TextView>` to input text is generally an error, you should be using `&lt;EditText>` instead.  `EditText` is a subclass of `TextView`, and some of the editing support is provided by `TextView`, so it&apos;s possible to set some input-related properties on a `TextView`. However, using a `TextView` along with input attributes is usually a cut &amp; paste error. To input text you should be using `&lt;EditText>`.
This check also checks subclasses of `TextView`, such as `Button` and `CheckBox`, since these have the same issue: they should not be used with editable attributes."
        errorLine1="  android:phoneNumber=&quot;false&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="33"
            column="3"/>
    </issue>

    <issue
        id="TextViewEdits"
        severity="Warning"
        message="Attribute android:phoneNumber should not be used with &lt;TextView>: Change element type to &lt;EditText> ?"
        category="Correctness"
        priority="7"
        summary="Looks for TextViews being used for input"
        explanation="Using a `&lt;TextView>` to input text is generally an error, you should be using `&lt;EditText>` instead.  `EditText` is a subclass of `TextView`, and some of the editing support is provided by `TextView`, so it&apos;s possible to set some input-related properties on a `TextView`. However, using a `TextView` along with input attributes is usually a cut &amp; paste error. To input text you should be using `&lt;EditText>`.
This check also checks subclasses of `TextView`, such as `Button` and `CheckBox`, since these have the same issue: they should not be used with editable attributes."
        errorLine1="  android:phoneNumber=&quot;false&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="33"
            column="3"/>
    </issue>

    <issue
        id="TextViewEdits"
        severity="Warning"
        message="Attribute android:autoText should not be used with &lt;TextView>: Change element type to &lt;EditText> ?"
        category="Correctness"
        priority="7"
        summary="Looks for TextViews being used for input"
        explanation="Using a `&lt;TextView>` to input text is generally an error, you should be using `&lt;EditText>` instead.  `EditText` is a subclass of `TextView`, and some of the editing support is provided by `TextView`, so it&apos;s possible to set some input-related properties on a `TextView`. However, using a `TextView` along with input attributes is usually a cut &amp; paste error. To input text you should be using `&lt;EditText>`.
This check also checks subclasses of `TextView`, such as `Button` and `CheckBox`, since these have the same issue: they should not be used with editable attributes."
        errorLine1="  android:autoText=&quot;true&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="53"
            column="3"/>
    </issue>

    <issue
        id="TextViewEdits"
        severity="Warning"
        message="Attribute android:autoText should not be used with &lt;TextView>: Change element type to &lt;EditText> ?"
        category="Correctness"
        priority="7"
        summary="Looks for TextViews being used for input"
        explanation="Using a `&lt;TextView>` to input text is generally an error, you should be using `&lt;EditText>` instead.  `EditText` is a subclass of `TextView`, and some of the editing support is provided by `TextView`, so it&apos;s possible to set some input-related properties on a `TextView`. However, using a `TextView` along with input attributes is usually a cut &amp; paste error. To input text you should be using `&lt;EditText>`.
This check also checks subclasses of `TextView`, such as `Button` and `CheckBox`, since these have the same issue: they should not be used with editable attributes."
        errorLine1="  android:autoText=&quot;true&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="53"
            column="3"/>
    </issue>

    <issue
        id="TextViewEdits"
        severity="Warning"
        message="Attribute android:phoneNumber should not be used with &lt;TextView>: Change element type to &lt;EditText> ?"
        category="Correctness"
        priority="7"
        summary="Looks for TextViews being used for input"
        explanation="Using a `&lt;TextView>` to input text is generally an error, you should be using `&lt;EditText>` instead.  `EditText` is a subclass of `TextView`, and some of the editing support is provided by `TextView`, so it&apos;s possible to set some input-related properties on a `TextView`. However, using a `TextView` along with input attributes is usually a cut &amp; paste error. To input text you should be using `&lt;EditText>`.
This check also checks subclasses of `TextView`, such as `Button` and `CheckBox`, since these have the same issue: they should not be used with editable attributes."
        errorLine1="  android:phoneNumber=&quot;false&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="33"
            column="3"/>
    </issue>

    <issue
        id="TextViewEdits"
        severity="Warning"
        message="Attribute android:phoneNumber should not be used with &lt;TextView>: Change element type to &lt;EditText> ?"
        category="Correctness"
        priority="7"
        summary="Looks for TextViews being used for input"
        explanation="Using a `&lt;TextView>` to input text is generally an error, you should be using `&lt;EditText>` instead.  `EditText` is a subclass of `TextView`, and some of the editing support is provided by `TextView`, so it&apos;s possible to set some input-related properties on a `TextView`. However, using a `TextView` along with input attributes is usually a cut &amp; paste error. To input text you should be using `&lt;EditText>`.
This check also checks subclasses of `TextView`, such as `Button` and `CheckBox`, since these have the same issue: they should not be used with editable attributes."
        errorLine1="  android:phoneNumber=&quot;false&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="33"
            column="3"/>
    </issue>

    <issue
        id="TextViewEdits"
        severity="Warning"
        message="Attribute android:autoText should not be used with &lt;TextView>: Change element type to &lt;EditText> ?"
        category="Correctness"
        priority="7"
        summary="Looks for TextViews being used for input"
        explanation="Using a `&lt;TextView>` to input text is generally an error, you should be using `&lt;EditText>` instead.  `EditText` is a subclass of `TextView`, and some of the editing support is provided by `TextView`, so it&apos;s possible to set some input-related properties on a `TextView`. However, using a `TextView` along with input attributes is usually a cut &amp; paste error. To input text you should be using `&lt;EditText>`.
This check also checks subclasses of `TextView`, such as `Button` and `CheckBox`, since these have the same issue: they should not be used with editable attributes."
        errorLine1="  android:autoText=&quot;true&quot;/>"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="55"
            column="3"/>
    </issue>

    <issue
        id="TextViewEdits"
        severity="Warning"
        message="Attribute android:autoText should not be used with &lt;TextView>: Change element type to &lt;EditText> ?"
        category="Correctness"
        priority="7"
        summary="Looks for TextViews being used for input"
        explanation="Using a `&lt;TextView>` to input text is generally an error, you should be using `&lt;EditText>` instead.  `EditText` is a subclass of `TextView`, and some of the editing support is provided by `TextView`, so it&apos;s possible to set some input-related properties on a `TextView`. However, using a `TextView` along with input attributes is usually a cut &amp; paste error. To input text you should be using `&lt;EditText>`.
This check also checks subclasses of `TextView`, such as `Button` and `CheckBox`, since these have the same issue: they should not be used with editable attributes."
        errorLine1="  android:autoText=&quot;true&quot;/>"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="55"
            column="3"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="  String path = String.format(&quot;%s?id=%d&quot;, getApiPath(), input);"
        errorLine2="                       ~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\api\AsyncGetById.java"
            line="28"
            column="24"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead"
        category="Correctness"
        priority="6"
        summary="Finds calls to locale-ambiguous `String` manipulation methods"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="  String path = String.format(&quot;%s?id=%d&quot;, getApiPath(), input);"
        errorLine2="                       ~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\api\AsyncGetById.java"
            line="28"
            column="24"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Using `SimpleDateFormat` directly without an explicit locale"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1=" public static final SimpleDateFormat shortDateFormat = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;);"
        errorLine2="                     ~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\BaseFragment.java"
            line="21"
            column="22"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Using `SimpleDateFormat` directly without an explicit locale"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1=" public static final SimpleDateFormat shortDateFormat = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;);"
        errorLine2="                     ~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\BaseFragment.java"
            line="21"
            column="22"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Using `SimpleDateFormat` directly without an explicit locale"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1=" public static final SimpleDateFormat shortTimeFormat = new SimpleDateFormat(&quot;HH:mm&quot;);"
        errorLine2="                     ~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\BaseFragment.java"
            line="22"
            column="22"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Using `SimpleDateFormat` directly without an explicit locale"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1=" public static final SimpleDateFormat shortTimeFormat = new SimpleDateFormat(&quot;HH:mm&quot;);"
        errorLine2="                     ~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\BaseFragment.java"
            line="22"
            column="22"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Using `SimpleDateFormat` directly without an explicit locale"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1=" public static final SimpleDateFormat longDateTimeFormat = new SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;);"
        errorLine2="                     ~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\BaseFragment.java"
            line="23"
            column="22"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Using `SimpleDateFormat` directly without an explicit locale"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1=" public static final SimpleDateFormat longDateTimeFormat = new SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;);"
        errorLine2="                     ~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\BaseFragment.java"
            line="23"
            column="22"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Using `SimpleDateFormat` directly without an explicit locale"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1=" public static final SimpleDateFormat ISO_8601 = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;);"
        errorLine2="                     ~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\model\ServerModel.java"
            line="18"
            column="22"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Using `SimpleDateFormat` directly without an explicit locale"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1=" public static final SimpleDateFormat ISO_8601 = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;);"
        errorLine2="                     ~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\model\ServerModel.java"
            line="18"
            column="22"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="The default constructor must be public"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" private BookingsListFragment() {}"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\BookingsListFragment.java"
            line="39"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="The default constructor must be public"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" private BookingsListFragment() {}"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\BookingsListFragment.java"
            line="39"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="The default constructor must be public"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" private BookingsViewFragment(){}"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\BookingsViewFragment.java"
            line="41"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="The default constructor must be public"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" private BookingsViewFragment(){}"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\BookingsViewFragment.java"
            line="41"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="This fragment should provide a default constructor (a public constructor with no arguments) (com.e9ine.cab9.driver.fragments.ProfileFragment)"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" public static ProfileFragment newInstance(int driverid) {"
        errorLine2="               ~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\ProfileFragment.java"
            line="34"
            column="16"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="This fragment should provide a default constructor (a public constructor with no arguments) (com.e9ine.cab9.driver.fragments.ProfileFragment)"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" public static ProfileFragment newInstance(int driverid) {"
        errorLine2="               ~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\ProfileFragment.java"
            line="34"
            column="16"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="Avoid non-default constructors in fragments: use a default constructor plus Fragment#setArguments(Bundle) instead"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" public ProfileFragment(Bundle args) {"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\ProfileFragment.java"
            line="40"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="Avoid non-default constructors in fragments: use a default constructor plus Fragment#setArguments(Bundle) instead"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" public ProfileFragment(Bundle args) {"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\ProfileFragment.java"
            line="40"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="The default constructor must be public"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" private ShiftViewFragment() {}"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\ShiftViewFragment.java"
            line="49"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="The default constructor must be public"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" private ShiftViewFragment() {}"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\ShiftViewFragment.java"
            line="49"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="The default constructor must be public"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" private ShiftsListFragment() {}"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\ShiftsListFragment.java"
            line="41"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Error"
        message="The default constructor must be public"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" private ShiftsListFragment() {}"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\java\com\e9ine\cab9\driver\fragments\ShiftsListFragment.java"
            line="41"/>
    </issue>

    <issue
        id="WrongManifestParent"
        severity="Fatal"
        message="The &lt;uses-library> element must be a direct child of the &lt;application> element"
        category="Correctness"
        priority="6"
        summary="Checks that various manifest elements are declared in the right place"
        explanation="The `&lt;uses-library>` element should be defined as a direct child of the `&lt;application>` tag, not the `&lt;manifest>` tag or an `&lt;activity>` tag. Similarly, a `&lt;uses-sdk>` tag much be declared at the root level, and so on. This check looks for incorrect declaration locations in the manifest, and complains if an element is found in the wrong place."
        url="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        urls="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        errorLine1="    &lt;uses-library"
        errorLine2="    ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\AndroidManifest.xml"
            line="13"
            column="5"/>
    </issue>

    <issue
        id="WrongManifestParent"
        severity="Fatal"
        message="The &lt;uses-library> element must be a direct child of the &lt;application> element"
        category="Correctness"
        priority="6"
        summary="Checks that various manifest elements are declared in the right place"
        explanation="The `&lt;uses-library>` element should be defined as a direct child of the `&lt;application>` tag, not the `&lt;manifest>` tag or an `&lt;activity>` tag. Similarly, a `&lt;uses-sdk>` tag much be declared at the root level, and so on. This check looks for incorrect declaration locations in the manifest, and complains if an element is found in the wrong place."
        url="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        urls="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        errorLine1="    &lt;uses-library"
        errorLine2="    ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\AndroidManifest.xml"
            line="13"
            column="5"/>
    </issue>

    <issue
        id="WrongManifestParent"
        severity="Fatal"
        message="The &lt;uses-library> element must be a direct child of the &lt;application> element"
        category="Correctness"
        priority="6"
        summary="Checks that various manifest elements are declared in the right place"
        explanation="The `&lt;uses-library>` element should be defined as a direct child of the `&lt;application>` tag, not the `&lt;manifest>` tag or an `&lt;activity>` tag. Similarly, a `&lt;uses-sdk>` tag much be declared at the root level, and so on. This check looks for incorrect declaration locations in the manifest, and complains if an element is found in the wrong place."
        url="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        urls="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        errorLine1=" &lt;uses-library"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\AndroidManifest.xml"
            line="17"
            column="2"/>
    </issue>

    <issue
        id="WrongManifestParent"
        severity="Fatal"
        message="The &lt;uses-library> element must be a direct child of the &lt;application> element"
        category="Correctness"
        priority="6"
        summary="Checks that various manifest elements are declared in the right place"
        explanation="The `&lt;uses-library>` element should be defined as a direct child of the `&lt;application>` tag, not the `&lt;manifest>` tag or an `&lt;activity>` tag. Similarly, a `&lt;uses-sdk>` tag much be declared at the root level, and so on. This check looks for incorrect declaration locations in the manifest, and complains if an element is found in the wrong place."
        url="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        urls="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        errorLine1=" &lt;uses-library"
        errorLine2=" ^">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\AndroidManifest.xml"
            line="17"
            column="2"/>
    </issue>

    <issue
        id="Deprecated"
        severity="Warning"
        message="android:phoneNumber is deprecated: Use inputType instead"
        category="Correctness"
        priority="2"
        summary="Looks for usages of deprecated layouts, attributes, and so on."
        explanation="Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned."
        errorLine1="  android:phoneNumber=&quot;false&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="33"
            column="3"/>
    </issue>

    <issue
        id="Deprecated"
        severity="Warning"
        message="android:phoneNumber is deprecated: Use inputType instead"
        category="Correctness"
        priority="2"
        summary="Looks for usages of deprecated layouts, attributes, and so on."
        explanation="Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned."
        errorLine1="  android:phoneNumber=&quot;false&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="33"
            column="3"/>
    </issue>

    <issue
        id="Deprecated"
        severity="Warning"
        message="android:autoText is deprecated: Use inputType instead"
        category="Correctness"
        priority="2"
        summary="Looks for usages of deprecated layouts, attributes, and so on."
        explanation="Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned."
        errorLine1="  android:autoText=&quot;true&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="53"
            column="3"/>
    </issue>

    <issue
        id="Deprecated"
        severity="Warning"
        message="android:autoText is deprecated: Use inputType instead"
        category="Correctness"
        priority="2"
        summary="Looks for usages of deprecated layouts, attributes, and so on."
        explanation="Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned."
        errorLine1="  android:autoText=&quot;true&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="53"
            column="3"/>
    </issue>

    <issue
        id="Deprecated"
        severity="Warning"
        message="android:phoneNumber is deprecated: Use inputType instead"
        category="Correctness"
        priority="2"
        summary="Looks for usages of deprecated layouts, attributes, and so on."
        explanation="Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned."
        errorLine1="  android:phoneNumber=&quot;false&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="33"
            column="3"/>
    </issue>

    <issue
        id="Deprecated"
        severity="Warning"
        message="android:phoneNumber is deprecated: Use inputType instead"
        category="Correctness"
        priority="2"
        summary="Looks for usages of deprecated layouts, attributes, and so on."
        explanation="Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned."
        errorLine1="  android:phoneNumber=&quot;false&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="33"
            column="3"/>
    </issue>

    <issue
        id="Deprecated"
        severity="Warning"
        message="android:autoText is deprecated: Use inputType instead"
        category="Correctness"
        priority="2"
        summary="Looks for usages of deprecated layouts, attributes, and so on."
        explanation="Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned."
        errorLine1="  android:autoText=&quot;true&quot;/>"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="55"
            column="3"/>
    </issue>

    <issue
        id="Deprecated"
        severity="Warning"
        message="android:autoText is deprecated: Use inputType instead"
        category="Correctness"
        priority="2"
        summary="Looks for usages of deprecated layouts, attributes, and so on."
        explanation="Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned."
        errorLine1="  android:autoText=&quot;true&quot;/>"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="55"
            column="3"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_background with a theme that also paints a background (inferred theme is @style/Theme_Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="    android:background=&quot;@color/theme_background&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\activity_main.xml"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_background with a theme that also paints a background (inferred theme is @style/Theme_Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="    android:background=&quot;@color/theme_background&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\activity_main.xml"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_background with a theme that also paints a background (inferred theme is @style/Theme.Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="              android:background=&quot;@color/theme_background&quot;>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="7"
            column="15"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_background with a theme that also paints a background (inferred theme is @style/Theme.Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="              android:background=&quot;@color/theme_background&quot;>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="7"
            column="15"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_green with a theme that also paints a background (inferred theme is @style/Theme.Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1=" android:background=&quot;@color/theme_green&quot;>"
        errorLine2=" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_navigation_drawer.xml"
            line="8"
            column="2"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_green with a theme that also paints a background (inferred theme is @style/Theme.Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1=" android:background=&quot;@color/theme_green&quot;>"
        errorLine2=" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_navigation_drawer.xml"
            line="8"
            column="2"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_background with a theme that also paints a background (inferred theme is @style/Theme.Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="              android:background=&quot;@color/theme_background&quot;>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_profile.xml"
            line="7"
            column="15"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_background with a theme that also paints a background (inferred theme is @style/Theme.Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="              android:background=&quot;@color/theme_background&quot;>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_profile.xml"
            line="7"
            column="15"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_background with a theme that also paints a background (inferred theme is @style/Theme.Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="              android:background=&quot;@color/theme_background&quot;>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="7"
            column="15"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_background with a theme that also paints a background (inferred theme is @style/Theme.Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="              android:background=&quot;@color/theme_background&quot;>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="7"
            column="15"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_black_transparent with a theme that also paints a background (inferred theme is @style/Theme.Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1=" android:background=&quot;@color/theme_black_transparent&quot;"
        errorLine2=" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_spinner.xml"
            line="7"
            column="2"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background @color/theme_black_transparent with a theme that also paints a background (inferred theme is @style/Theme.Cab9)"
        category="Performance"
        priority="3"
        summary="Looks for overdraw issues (where a view is painted only to be fully painted over)"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1=" android:background=&quot;@color/theme_black_transparent&quot;"
        errorLine2=" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_spinner.xml"
            line="7"
            column="2"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable res/drawable/background_login.png in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Ensures that images are not defined in the density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable\background_login.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable res/drawable/background_login.png in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Ensures that images are not defined in the density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable\background_login.png"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-xhdpi: theme_button_normal.9.png (found in drawable-mdpi, drawable-hdpi)"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xhdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-xhdpi: theme_button_normal.9.png (found in drawable-mdpi, drawable-hdpi)"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xhdpi"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: theme_button_disabled.9.png, theme_button_orange_disabled.9.png, theme_button_red_disabled.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_red_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_orange_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_disabled.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: theme_button_disabled.9.png, theme_button_orange_disabled.9.png, theme_button_red_disabled.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_red_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_orange_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_disabled.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: theme_button_disabled.9.png, theme_button_orange_disabled.9.png, theme_button_red_disabled.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_red_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_orange_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_disabled.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: theme_button_disabled.9.png, theme_button_orange_disabled.9.png, theme_button_red_disabled.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_red_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_orange_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_disabled.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: theme_button_disabled.9.png, theme_button_orange_disabled.9.png, theme_button_red_disabled.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_red_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_orange_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_disabled.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: theme_button_disabled.9.png, theme_button_orange_disabled.9.png, theme_button_red_disabled.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_red_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_orange_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_disabled.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: theme_button_disabled.9.png, theme_button_orange_disabled.9.png, theme_button_red_disabled.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_red_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_orange_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_disabled.9.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: theme_button_disabled.9.png, theme_button_orange_disabled.9.png, theme_button_red_disabled.9.png"
        category="Usability:Icons"
        priority="3"
        summary="Finds duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_red_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_orange_disabled.9.png"/>
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\drawable-xxhdpi\theme_button_disabled.9.png"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="  &lt;ImageView"
        errorLine2="  ^"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_profile.xml"
            line="30"
            column="3"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="  &lt;ImageView"
        errorLine2="  ^"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_profile.xml"
            line="30"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;#12345&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;#12345&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="53"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;#12345&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;#12345&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="53"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00/00/0000 00:00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;00/00/0000 00:00&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="64"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00/00/0000 00:00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;00/00/0000 00:00&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="64"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;From&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;From&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="75"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;From&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;From&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="75"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;From&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;From&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="87"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;From&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;From&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="87"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;To&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;To&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="99"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;To&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;To&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="99"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;To&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;To&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="112"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;To&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;To&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="112"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Booking Details&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Booking Details&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="125"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Booking Details&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Booking Details&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="125"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Name&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;Name&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="143"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Name&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;Name&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="143"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Fare&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;Fare&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="169"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Fare&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;Fare&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="169"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Vehicle&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;Vehicle&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="195"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Vehicle&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;Vehicle&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_booking_view.xml"
            line="195"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Next&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Next&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_map.xml"
            line="24"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Next&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Next&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_map.xml"
            line="24"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Location&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Location&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_map.xml"
            line="34"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Location&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Location&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_map.xml"
            line="34"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Base&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Base&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_map.xml"
            line="44"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Base&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Base&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_map.xml"
            line="44"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Profile&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;Profile&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_profile.xml"
            line="13"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Profile&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;Profile&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_profile.xml"
            line="13"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00/00/0000&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;00/00/0000&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="33"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00/00/0000&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;00/00/0000&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="33"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;StartTime&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;StartTime&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="45"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;StartTime&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;StartTime&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="45"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00:00:00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;00:00:00&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="56"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00:00:00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;00:00:00&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="56"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Vehicle&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Vehicle&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="70"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Vehicle&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="   android:text=&quot;Vehicle&quot;"
        errorLine2="   ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="70"
            column="4"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;00&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="95"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;00&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="95"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;00&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="110"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;00&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="110"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;00&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="125"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;00&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="125"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;00&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="140"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;00&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\fragment_shifts_view.xml"
            line="140"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;#123456&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;#123456&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="18"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;#123456&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;#123456&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="18"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Booking Origin&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;Booking Origin&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="30"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Booking Origin&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;Booking Origin&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="30"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00:00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;00:00&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="45"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00:00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;00:00&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_booking_list_item.xml"
            line="45"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Large Text&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;Large Text&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_navigation_drawer_list_item.xml"
            line="13"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Large Text&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;Large Text&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_navigation_drawer_list_item.xml"
            line="13"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00 / 00 / 0000&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;00 / 00 / 0000&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="18"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00 / 00 / 0000&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;00 / 00 / 0000&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="18"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;12 Miles&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;12 Miles&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="30"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;12 Miles&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;12 Miles&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="30"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;00&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="43"
            column="3"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;00&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Eclipse there is a quickfix to automatically extract this hardcoded string into a resource lookup."
        errorLine1="  android:text=&quot;00&quot;"
        errorLine2="  ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="C:\Users\David\Desktop\Final\Cab9Drivers\Cab9D\src\main\res\layout\include_shift_list_item.xml"
            line="43"
            column="3"/>
    </issue>

</issues>
